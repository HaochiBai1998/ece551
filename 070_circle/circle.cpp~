/*
class Circle{
  Point center;
  const double radius;
public:
  Circle(Point init_c,double init_r);
  void move(double dx,double dy);
  double intersectionArea(const Circle & otherCircle);
}
*/
#include "circle.hpp"
#include "cmath"
#define pi acos(-1)
Circle::Circle(Point init_c,double init_r):center(init_c),radius(init_r){}
void Circle::move(double dx,double dy){
  center.Point::move(dx,dy);
}
double Circle::intersectionArea(const Circle & otherCircle){
  const double d= center.distanceFrom(otherCircle.center);
  if((radius+otherCircle.radius)<=d)
    return 0;
  if(radius>otherCircle.radius){
    double tmp=radius;
    radius=otherCircle.radius;
    otherCircle.radius=tmp;
  }
  if(otherCircle.radius-radius>=d)
    return pi*radius*radius;
  double ang1=acos((radius*radius+d*d-otherCircle.radius*otherCircle.radius)/(2*radius*d));
  double ang2=acos((-radius*radius+d*d+otherCircle.radius*otherCircle.radius)/(2*otherCircle.radius*d));
  return ang1*radius*radius+ang2*otherCircle.radius*otherCircle.radius-d*radius*sin(ang1);
}
